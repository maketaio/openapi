// Code generated by oapigen; DO NOT EDIT.
package testdata

import (
	"encoding/json"
)

// User is the generated type for schema User
type User struct {
	Id                   int32                      `json:"id"`
	Name                 string                     `json:"name"`
	Metadata             *map[string]string         `json:"metadata,omitzero"`
	AdditionalProperties map[string]json.RawMessage `json:"-"`
}

func (o *User) UnmarshalJSON(data []byte) error {
	type alias User
	a := alias{}
	if err := json.Unmarshal(data, &a); err != nil {
		return err
	}
	*o = User(a)
	ap := map[string]json.RawMessage{}
	if err := json.Unmarshal(data, &ap); err != nil {
		return err
	}
	delete(ap, "id")
	delete(ap, "name")
	delete(ap, "metadata")
	if len(ap) > 0 {
		o.AdditionalProperties = ap
	}
	return nil
}

func (o *User) MarshalJSON() ([]byte, error) {
	o := make(map[string]any, len(o.AdditionalProperties)+3)
	o["id"] = o.Id
	o["name"] = o.Name
	o["metadata"] = o.Metadata
	for k, v := range o.AdditionalProperties {
		o[k] = v
	}
	return json.Marshal(o)
}
