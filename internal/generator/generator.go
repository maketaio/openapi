package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"strings"

	"github.com/maketaio/api/internal/util/set"
	"github.com/pb33f/libopenapi"
	v3 "github.com/pb33f/libopenapi/datamodel/high/v3"
)

type Config struct {
	In  string
	Out string
	Pkg string
}

func Generate(cfg *Config) error {
	bytes, err := os.ReadFile(cfg.In)
	if err != nil {
		return err
	}

	doc, err := libopenapi.NewDocument(bytes)
	if err != nil {
		return err
	}

	dm, err := doc.BuildV3Model()
	if err != nil {
		return err
	}

	decls, err := collectDecls(dm)
	if err != nil {
		return fmt.Errorf("failed to collect top level declarations: %w", err)
	}

	importSet := analyzeImports(decls)

	src, err := doGenerate(decls, importSet, cfg)
	if err != nil {
		return fmt.Errorf("failed to generate code: %w", err)
	}

	formatted, err := format.Source(src)
	if err != nil {
		return fmt.Errorf("failed to format code: %w", err)
	}

	outDir := filepath.Dir(cfg.Out)

	if err := os.MkdirAll(outDir, 0o755); err != nil {
		return err
	}

	if err := os.WriteFile(cfg.Out, formatted, 0o644); err != nil {
		return err
	}

	fmt.Printf("Successfully generated %s\n", cfg.Out)
	return nil
}

func collectDecls(dm *libopenapi.DocumentModel[v3.Document]) ([]*decl, error) {
	c := newCollector()

	for p := dm.Model.Components.Schemas.First(); p != nil; p = p.Next() {
		_, err := c.walk(p.Key(), []string{p.Key()}, p.Value().Schema())
		if err != nil {
			return nil, err
		}
	}

	return c.decls, nil
}

func doGenerate(decls []*decl, importSet set.Set[string], cfg *Config) ([]byte, error) {
	var buf bytes.Buffer
	fmt.Fprintf(&buf, "// Code generated by codegen oapi; DO NOT EDIT.\n")
	fmt.Fprintf(&buf, "package %s\n\n", packageName(cfg))
	if importSet.Len() > 0 {
		fmt.Fprintf(&buf, "import (\n")
		for importPath := range importSet {
			fmt.Fprintf(&buf, "\"%s\"\n", importPath)
		}
		fmt.Fprintf(&buf, ")\n\n")
	}

	for _, decl := range decls {
		fmt.Fprintf(&buf, "// %s is the generated type for schema %s\n", decl.name, strings.Join(decl.path, "/"))
		for _, doc := range decl.doc {
			buf.WriteString("// ")
			buf.WriteString(doc)
			buf.WriteString("\n")
		}

		buf.WriteString("type ")
		buf.WriteString(decl.name)
		buf.WriteString(" ")
		writeType(&buf, decl.typ)
		buf.WriteString("\n")

		if len(decl.typ.enum) > 0 {
			buf.WriteString("const (\n")
			for _, enumConst := range decl.typ.enum {
				for _, doc := range enumConst.doc {
					buf.WriteString("// ")
					buf.WriteString(doc)
					buf.WriteString("\n")
				}

				fmt.Fprintf(&buf, "%s %s = %s\n", enumConst.name, decl.name, enumConst.lit)
			}
			buf.WriteString(")\n")
		}
	}

	return buf.Bytes(), nil
}

func writeType(buf *bytes.Buffer, t *goType) {
	switch t.kind {
	case kindInt32:
		buf.WriteString("int32")
	case kindInt64:
		buf.WriteString("int64")
	case kindFloat64:
		buf.WriteString("float64")
	case kindString:
		buf.WriteString("string")
	case kindBool:
		buf.WriteString("bool")
	case kindBytes:
		buf.WriteString("[]byte")
	case kindTime:
		buf.WriteString("time.Time")
	case kindRef:
		buf.WriteString(t.ref)
	case kindSlice:
		buf.WriteString("[]")
		writeType(buf, t.elem)
	case kindMap:
		buf.WriteString("map[")
		writeType(buf, t.key)
		buf.WriteString("]")
		writeType(buf, t.value)
	case kindStruct:
		buf.WriteString("struct {\n")
		for _, field := range t.fields {
			for _, doc := range field.doc {
				buf.WriteString("// ")
				buf.WriteString(doc)
				buf.WriteString("\n")
			}

			buf.WriteString(field.name)
			buf.WriteString(" ")
			if !field.required {
				buf.WriteString("*")
			}
			writeType(buf, field.typ)
			buf.WriteString(" `json:\"")
			buf.WriteString(field.jsonName)
			if !field.required {
				buf.WriteString(",omitzero")
			}
			buf.WriteString("\"`\n")
		}
		buf.WriteString("}")
	}
}

func packageName(cfg *Config) string {
	if cfg.Pkg != "" {
		return cfg.Pkg
	}

	return filepath.Base(filepath.Dir(cfg.Out))
}

func doAnalyzeImports(typ *goType) set.Set[string] {
	importSet := set.NewSet[string]()

	if typ.kind == kindTime {
		importSet.Add("time")
		return importSet
	}

	if typ.kind == kindSlice {
		return doAnalyzeImports(typ.elem)
	}

	if typ.kind == kindMap {
		return doAnalyzeImports(typ.value)
	}

	if typ.kind == kindStruct {
		for _, field := range typ.fields {
			importSet.Merge(doAnalyzeImports(field.typ))
		}
	}

	return importSet
}

func analyzeImports(decls []*decl) set.Set[string] {
	importSet := set.NewSet[string]()

	for _, decl := range decls {
		importSet.Merge(doAnalyzeImports(decl.typ))
	}

	return importSet
}
